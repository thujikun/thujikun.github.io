<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Thujikun blog]]></title>
  <link href="http://thujikun.github.io/atom.xml" rel="self"/>
  <link href="http://thujikun.github.io/"/>
  <updated>2014-12-09T07:35:01+09:00</updated>
  <id>http://thujikun.github.io/</id>
  <author>
    <name><![CDATA[Ryosuke Tsuji]]></name>
    <email><![CDATA[tsuji.0107@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[webpackを使い倒す]]></title>
    <link href="http://thujikun.github.io/blog/2014/12/07/webpack/"/>
    <updated>2014-12-07T16:23:03+09:00</updated>
    <id>http://thujikun.github.io/blog/2014/12/07/webpack</id>
    <content type="html"><![CDATA[<p>本エントリー<a href="http://qiita.com/advent-calendar/2014/javascript">JavaScript Advent Calendar 2014</a>&nbsp;7日目の記事になります。</p>

<h2>webpackとは</h2>

<p>概要については最近いろんな方が書いてるいるのでそちらを参考にしていただければつかめるかと。</p>

<ul>
<li><a href="http://qiita.com/shn/items/7bd544a39ee7ac858669">全部のせRequireJSっぽいWebpackを使ってみた。</a></li>
<li><a href="http://ameblo.jp/ca-1pixel/entry-11884453208.html">RequireJS等はもう古い。WebPackとは？</a></li>
</ul>


<p>ようはナウいフロントエンドの依存解決ツールですね。</p>

<p>っていうネタで書こうと思っていたら、昨日yutaponさんが既に書いていたりするので（<a href="http://yutapon.hatenablog.com/entry/2014/12/06/123000">gulp.jsを使ってフロントエンドのビルドをする【webpack, stylus】</a>）、いいところは<del>パクリ</del>参考にしつつ、もうちょっとwebpackに突っ込んだ内容を書いてみようと思います。</p>

<h2>Options</h2>

<h3>entryとoutput</h3>

<p>簡単に試すときはentryは1ファイルだけ指定できればよいですが、実際にプロジェクトで使うとなると複数のファイルを指定しなければならない状況になるかと思います。</p>

<p>webpackのentryはオブジェクト形式に対応していて、outputでそのproperty名を使用して動的に名前をつけることでその問題が解決できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="nx">entry</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">top</span><span class="o">:</span> <span class="s1">&#39;./app/main.js&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">list</span><span class="o">:</span> <span class="s1">&#39;./app/list/main.js&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">output</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">filename</span><span class="o">:</span> <span class="s1">&#39;[name].bundle.js&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">publicPath</span><span class="o">:</span> <span class="s1">&#39;/assets/&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のような設定をすることで結果的に top.bundle.jsとlist.bundle.jsの2ファイルがdestに指定したディレクトリに置かれることになります。</p>

<h3>loader</h3>

<p>Webpackの大きな特徴としてjs以外のどんなファイルでもloaderさえ使えば読み込むことができる、というのがあります。</p>

<p><a href="http://webpack.github.io/docs/list-of-loaders.html">loader一覧</a></p>

<p>上記を見てわかるようにかなりの数のloaderがあるので、いくつかpuckupして紹介します。</p>

<ul>
<li><p>html-loader</p>

<p>  htmlファイルを読み込んで文字列としてjs内で使用することが可能。underscoreのtemplateなど、フロントでrenderingをするときに非常に便利。</p></li>
<li><p>css-loader(sass-loader, stylus-loader)</p>

<p>  cssファイルをテキストとして読み込んで、headに埋め込むことが可能。sass-loaderやstylus-loaderの場合compileも同時に行う。angularやreact等を使ってHTMLをcomponentとして扱っている場合に有効。</p></li>
<li><p>json-loader</p>

<p>  jsonファイルを読み込んで、jsのオブジェクトに変換して使うことが可能。</p></li>
<li><p>coffee-loader</p>

<p>  coffee scriptで書かれたファイルをjsに変換して読み込むことが可能。</p></li>
<li><p>jade-loader</p>

<p>  jadeで書かれたファイルをhtmlに変換して読み込むことが可能。</p></li>
<li><p>es6-loader</p>

<p>  es6で書かれたコードをes5互換にして読み込むことが可能。</p></li>
<li><p>url-loader
  ファイルサイズが小さい場合data-uriに変換して読み込み、大きい場合はそのままpathとして読み込むことが可能。</p></li>
<li><p>expose-loader</p>

<p>  指定したファイル内のオブジェクトをグローバル変数として外に公開することが可能。詳しくは下の例を見るとわかりやすい。</p></li>
<li><p>export-loader</p>

<p>  commonJS形式に対応していない（module.exportsがない）jsファイルにmodule.exportsの記述を追加し、内部の変数を外に公開することが可能。</p></li>
</ul>


<p>などなどwebpackを強力なツールたらしめているのがloaderです。是非使いこなしましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// configで指定する場合</span>
</span><span class='line'><span class="nx">module</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">loaders</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="c1">// htmlファイルを読み込んだ場合にhtml-loaderを使用する。その際minimizeする。</span>
</span><span class='line'>        <span class="p">{</span> <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.html$/</span><span class="p">,</span> <span class="nx">loader</span><span class="o">:</span> <span class="s1">&#39;html?minimize&#39;</span> <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// cssファイルを読み込んだ場合にcss-loaderを使用する。その際minimizeする。</span>
</span><span class='line'>        <span class="p">{</span> <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.css$/</span><span class="p">,</span> <span class="nx">loader</span><span class="o">:</span> <span class="s1">&#39;css?minimize&#39;</span> <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// jsonファイルを読み込んだ場合にjson-loaderを使用する。</span>
</span><span class='line'>        <span class="p">{</span> <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.json$/</span><span class="p">,</span> <span class="nx">loader</span><span class="o">:</span> <span class="s1">&#39;json&#39;</span> <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// coffeeファイルを読み込んだ場合にcoffee-loaderを使用する。</span>
</span><span class='line'>        <span class="p">{</span> <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.coffee$/</span><span class="p">,</span> <span class="nx">loader</span><span class="o">:</span> <span class="s1">&#39;coffee&#39;</span> <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// jadeファイルを読み込んだ場合にjade-loaderを使用する。</span>
</span><span class='line'>        <span class="p">{</span> <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.jade$/</span><span class="p">,</span> <span class="nx">loader</span><span class="o">:</span> <span class="s1">&#39;jade&#39;</span> <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// es6で記述されたjsファイルを読み込んだ場合にes6-loaderを使用する。</span>
</span><span class='line'>        <span class="p">{</span> <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.js$/</span><span class="p">,</span> <span class="nx">loader</span><span class="o">:</span> <span class="s1">&#39;es6&#39;</span> <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 画像ファイルを読み込んだ場合にurl-loaderを使用する。ファイルサイズが8kb以下であればdata-uriに変換する</span>
</span><span class='line'>        <span class="p">{</span> <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.png$/</span><span class="p">,</span> <span class="nx">loader</span><span class="o">:</span> <span class="s1">&#39;url?limit=8192&#39;</span> <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// jQueryを読み込んだ場合に&quot;jQuery&quot;をグローバルオブジェクトにする。</span>
</span><span class='line'>        <span class="p">{</span> <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.jquery.js$/</span><span class="p">,</span> <span class="nx">loader</span><span class="o">:</span> <span class="s1">&#39;espose?jQuery&#39;</span> <span class="p">},</span>
</span><span class='line'>        <span class="c1">// var $ = require(&#39;jquery&#39;);</span>
</span><span class='line'>        <span class="c1">// でグローバル変数にjQUeryが登録される</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// angularJsを読み込んだ場合に&quot;angular&quot;を外に公開する。</span>
</span><span class='line'>        <span class="p">{</span> <span class="nx">test</span><span class="o">:</span> <span class="sr">/angular\.js$/</span><span class="p">,</span> <span class="nx">loader</span><span class="o">:</span> <span class="s1">&#39;exports?angular&#39;</span> <span class="p">}</span>
</span><span class='line'>        <span class="c1">// var angular = require(&#39;angular&#39;);</span>
</span><span class='line'>        <span class="c1">// で変数&quot;angular&quot;が取得できる</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// requireのタイミングでloaderを指定することもできる。</span>
</span><span class='line'><span class="c1">// settings.jsonをjsのオブジェクトとして使用する。</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">settings</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;json!./data/settings.json&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// angularオブジェクトを使用する</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">angular</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;exports?angular!angular&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>resolve</h2>

<h3>extention</h3>

<p>読み込む際に拡張子を省略できるようにする。jsはデフォルトで入っている。個人的にはコンポーネントを作成した場合に名前を被らせることが多いのでjs以外の省略はしていない。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">resolve</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">extenstions</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;.js&#39;</span><span class="p">,</span> <span class="s1">&#39;.json&#39;</span><span class="p">,</span> <span class="s1">&#39;.html&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 上記のようになっているとき、下記のように省略することが可能。</span>
</span><span class='line'><span class="c1">// require(&#39;settings.json&#39;) -&gt;require(&#39;settings&#39;)</span>
</span><span class='line'><span class="c1">// require(&#39;item-template.html&#39;) -&gt;require(&#39;item-template&#39;)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>root</h3>

<p>requireで読み込むときのrootのpathを指定できる。配列で複数の指定が可能。下記のようなディレクトリ構造の場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">gulpfile</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="nx">gulp</span> <span class="err">┬</span> <span class="nx">config</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>     <span class="err">└</span> <span class="nx">tasks</span> <span class="err">─</span> <span class="err">各タスクファイル</span>
</span><span class='line'><span class="nx">app</span> <span class="err">─</span> <span class="nx">js</span> <span class="err">┬</span> <span class="nx">app</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>         <span class="err">└</span> <span class="err">─</span> <span class="nx">modules</span> <span class="err">┬</span> <span class="nx">dialog</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>                     <span class="err">└</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">js</span>
</span></code></pre></td></tr></table></div></figure>


<p>通常であれば</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//@file app.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">dialog</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./modules/dialog&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">tab</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./modules/tab&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>としなければならないところを、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//@ config.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">current</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">();</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 他の設定</span>
</span><span class='line'>    <span class="nx">resolve</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">root</span><span class="o">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">current</span><span class="p">,</span> <span class="s1">&#39;app/js/modules&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// 他の設定</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//@app.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">dialog</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;dialog&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">tab</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;tab&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように記述することが可能。</p>

<h3>alias</h3>

<p>ファイル単位でaliasをはる。root使えばいらない子のようなきがする。用途としてはbowerでとってきたときのmainに設定されてないファイルを使いたい場合くらいかな。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//@ config.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">current</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">();</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 他の設定</span>
</span><span class='line'>    <span class="nx">resolve</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">alias</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">bar</span><span class="o">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">current</span><span class="p">,</span> <span class="s1">&#39;bower_components/foo/plugins/bar.js&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// 他の設定</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//@app.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>plugins</h2>

<p>loaderと並んでwebpackの強力な機能。というか一部どっち使えばいいか迷うものもある。後述。</p>

<p><a href="https://github.com/webpack/docs/wiki/list-of-plugins">plugins一覧</a></p>

<p>見てわかるように非常に沢山あるので自分も見切れてないです。なので便利なやつだけ一部紹介します。</p>

<h3>ResolverPlugin</h3>

<p>これとresolveのrootの設定と組わせると、bowerでとってきたmoduleをそのままrequireすることが可能。非常に便利。他の用途もあるんだろうけど知らない。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//@ config.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">current</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 他の設定</span>
</span><span class='line'>    <span class="nx">resolve</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">root</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">current</span><span class="p">,</span> <span class="s1">&#39;bower_components&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">plugins</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">ResolverPlugin</span><span class="p">(</span>
</span><span class='line'>            <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">ResolverPlugin</span><span class="p">.</span><span class="nx">DirectoryDescriptionFilePlugin</span><span class="p">(</span><span class="s1">&#39;.bower.json&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;main&#39;</span><span class="p">])</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//@app.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">$</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;jquery&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>※ bowerモジュールの中にはbower.jsonをignoreに設定しているものがあるため、bowerが動的に作成する.bower.jsonを参照する方が安全。</p>

<h3>ProvidePlugin</h3>

<p>指定した変数を他のモジュール内で使用できるようにする。globalには置かない。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//@ config.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">current</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 他の設定</span>
</span><span class='line'>    <span class="nx">resolve</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">root</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">current</span><span class="p">,</span> <span class="s1">&#39;bower_components&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">plugins</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">ResolverPlugin</span><span class="p">(</span>
</span><span class='line'>            <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">ResolverPlugin</span><span class="p">.</span><span class="nx">DirectoryDescriptionFilePlugin</span><span class="p">(</span><span class="s1">&#39;.bower.json&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;main&#39;</span><span class="p">])</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">ProvidePlugin</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">jQuery</span><span class="o">:</span> <span class="s2">&quot;jquery&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">$</span><span class="o">:</span> <span class="s2">&quot;jquery&quot;</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//@app.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">$</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;jquery&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;jquery-ui&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>jQueryとかAngularのプラグインは、jQueryやangular変数に対してオブジェクトを追加する形となるため、その変数を参照できないとエラーになってしまいます。</p>

<p>そのときこのprovidePluginを使用するとこの問題を解決できるのですが、グローバル変数を生成するexpose-loaderでも解決することができます。</p>

<p>グローバル汚染しない分providePluginを使用する方が望ましいですが、別機能でwebpackに依存しないモジュールが画面内にあったりする場合はexpose-loaderで解決してもよいでしょう。</p>

<h3>開発環境向けplugin</h3>

<ul>
<li><p>HotModuleReplacementPlugin</p>

<p>  webpack-dev-serverを使っているときに、画面をリロードすることなくモジュールの差し替えを可能にする。（実験的機能）</p></li>
<li><p>NoErrorsPlugin</p>

<p>  compile時にエラーが出たらskipする。</p></li>
</ul>


<h3>本番環境向けplugin</h3>

<ul>
<li><p>DedupePlugin</p>

<p>  被ってるモジュールがいたらひとつにまとめる。</p></li>
<li><p>UglifyJsPlugin</p>

<p>  compile時にuglifyでminimizeする。</p></li>
<li><p>OccurenceOrderPlugin</p>

<p>  よく使われるモジュールに降るIDの桁数をより短くすることでよりコードを圧縮する。</p></li>
<li><p>AggressiveMergingPlugin</p>

<p>  ファイルを細かく分析し、まとめられるところはできるだけまとめてコードを圧縮する。Closure CompilerのADVANCED_OPTIMIZATIONみたいなことはしない。</p></li>
</ul>


<h2>Webpack Deb Server</h2>

<p>webpackが提供している開発環境向けのサーバー。compile時に時間がかかる問題を、修正がかかった箇所だけcompileする方式を採用することで高速化している。</p>

<p>上記で紹介したHotModuleReplacementPluginを使用するとreloadなしにモジュールの再読み込みが可能。</p>

<p>が、これ実際に使おうとすると情報が少なかったりして結構苦戦したので備忘録。</p>

<p>今回サンプルのアプリケーションを作成したときの開発環境、本番環境、webpack dev server、gulp-serveでたてたstaticサーバのそれぞれのconfig</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 本番環境</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nx">entry</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">top</span><span class="o">:</span> <span class="nx">dir</span><span class="p">.</span><span class="nx">js</span> <span class="o">+</span> <span class="s1">&#39;/main.js&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">output</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">filename</span><span class="o">:</span> <span class="s1">&#39;[name].bundle.js&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">publicPath</span><span class="o">:</span> <span class="s1">&#39;/js/&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">resolve</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">extensions</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;.js&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="nx">root</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">current</span><span class="p">,</span> <span class="s1">&#39;bower_components&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">current</span><span class="p">,</span> <span class="nx">dir</span><span class="p">.</span><span class="nx">js</span><span class="p">,</span> <span class="s1">&#39;modules&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">current</span><span class="p">,</span> <span class="nx">dir</span><span class="p">.</span><span class="nx">js</span><span class="p">,</span> <span class="s1">&#39;templates&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">debug</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">devtool</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">stats</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">colors</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">reasons</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">plugins</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">ResolverPlugin</span><span class="p">(</span>
</span><span class='line'>            <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">ResolverPlugin</span><span class="p">.</span><span class="nx">DirectoryDescriptionFilePlugin</span><span class="p">(</span><span class="s1">&#39;.bower.json&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;main&#39;</span><span class="p">])</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">DedupePlugin</span><span class="p">(),</span>
</span><span class='line'>        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">UglifyJsPlugin</span><span class="p">(),</span>
</span><span class='line'>        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">OccurenceOrderPlugin</span><span class="p">(),</span>
</span><span class='line'>        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">AggressiveMergingPlugin</span><span class="p">(),</span>
</span><span class='line'>        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">ProvidePlugin</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">jQuery</span><span class="o">:</span> <span class="s2">&quot;jquery&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">$</span><span class="o">:</span> <span class="s2">&quot;jquery&quot;</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nx">module</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">loaders</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span> <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.html$/</span><span class="p">,</span> <span class="nx">loader</span><span class="o">:</span> <span class="s1">&#39;html?minimize&#39;</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 開発環境</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nx">entry</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">top</span><span class="o">:</span> <span class="nx">dir</span><span class="p">.</span><span class="nx">js</span> <span class="o">+</span> <span class="s1">&#39;/main.js&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">output</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">path</span><span class="o">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">current</span><span class="p">,</span> <span class="s1">&#39;app&#39;</span><span class="p">,</span>  <span class="s1">&#39;js&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">filename</span><span class="o">:</span> <span class="s1">&#39;[name].bundle.js&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">publicPath</span><span class="o">:</span> <span class="s1">&#39;/js/&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">resolve</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">extensions</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;.js&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="nx">root</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">current</span><span class="p">,</span> <span class="s1">&#39;bower_components&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">current</span><span class="p">,</span> <span class="nx">dir</span><span class="p">.</span><span class="nx">js</span><span class="p">,</span> <span class="s1">&#39;modules&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">current</span><span class="p">,</span> <span class="nx">dir</span><span class="p">.</span><span class="nx">js</span><span class="p">,</span> <span class="s1">&#39;templates&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">cache</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">debug</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">devtool</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">stats</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">colors</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">reasons</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">plugins</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">ResolverPlugin</span><span class="p">(</span>
</span><span class='line'>            <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">ResolverPlugin</span><span class="p">.</span><span class="nx">DirectoryDescriptionFilePlugin</span><span class="p">(</span><span class="s1">&#39;.bower.json&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;main&#39;</span><span class="p">])</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">HotModuleReplacementPlugin</span><span class="p">(),</span>
</span><span class='line'>        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">NoErrorsPlugin</span><span class="p">(),</span>
</span><span class='line'>        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">ProvidePlugin</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">jQuery</span><span class="o">:</span> <span class="s2">&quot;jquery&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">$</span><span class="o">:</span> <span class="s2">&quot;jquery&quot;</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nx">module</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">loaders</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span> <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.html$/</span><span class="p">,</span> <span class="nx">loader</span><span class="o">:</span> <span class="s1">&#39;html?minimize&#39;</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// webpack dev server</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nx">contentBase</span><span class="o">:</span> <span class="s2">&quot;http://localhost:3000&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">hot</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">quiet</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">noInfo</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">lazy</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">watchDelay</span><span class="o">:</span> <span class="mi">300</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">publicPath</span><span class="o">:</span> <span class="s2">&quot;http://localhost:9000/js/&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">stats</span><span class="o">:</span> <span class="p">{</span> <span class="nx">colors</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// static server by gulp-serve</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nx">port</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">root</span><span class="o">:</span> <span class="p">[</span><span class="nx">dir</span><span class="p">.</span><span class="nx">tmp</span><span class="p">,</span> <span class="nx">dir</span><span class="p">.</span><span class="nx">app</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ハマりポイント1</h3>

<p>webpack dev serverでは&#8221;<a href="http://localhost:9000/webpack-dev-server/">http://localhost:9000/webpack-dev-server/</a>&ldquo;のようなURLでページを確認することになるため、pathをどう通していいかわからない。</p>

<p>→ と思っていたらiframeで&#8221;/webpack-dev-server/&ldquo;の部分を削ったページを表示していたので、pathに関してはやってみたら問題なかった。</p>

<h3>ハマりポイント2</h3>

<p>webpack dev serverでは、baseが一箇所しか指定できないため、開発環境でcompileしたファイルだけtmpディレクトリに置き、compileせずにそのまま使うファイルはappディレクトリに置いてどちらも参照する方法がわからない。</p>

<p>→ 別でたてたサーバをcontentBaseに設定することが可能。そのためgulp-serveを使って.tmpとappをrootにしたサーバを立ち上げ、webpack dev serverをそこに向けることができる。</p>

<p><code>contentBase: "http://localhost:3000",</code> のところ。</p>

<h3>はまりポイント3</h3>

<p>2の対策をした場合に、webpack dev serverが動的にcompileをかけるjsファイルの参照の仕方がわからない。</p>

<p>→ jsファイルのみwebpack dev serverの方のportを参照する必要あり。自分の場合&#8221;<a href="http://localhost:9000/js/top.bundle.js">http://localhost:9000/js/top.bundle.js</a>&#8220;を参照している。</p>

<p>またその場合に本番環境ではそのままにするわけにはいかないので、自分の場合はgulp-ectでhtmlも本番用と開発用を分けてbuildできるようにした。</p>

<p>ただ正直ここは自動で書き換えられるようにwebpack側で対応入れて欲しい。</p>

<h3>はまりポイント4</h3>

<p>webpack dev serverのwatchとgulp-watchの住み分けをどうすればいいかわからない。</p>

<p>→ webpack dev serverとwatchを並列で実行してしまえば問題ない。もちろんwatchの方でwebpackで管理しているファイルの監視をする必要はない。</p>

<p>以上、なかなか厄介でしたがとりあえず使えるようになりました。</p>

<p>gruntで使いたい場合はgenerator-react-webpackがやっているので参考にすると良いかもしれない。</p>

<h2>AMD形式の読み込み</h2>

<p>requireの第二引数のfunctionを入れれば、結果がcallbackで返ってくる。</p>

<p>この後紹介するsampleでは使っていないが、publicPathに設定したディレクトリに非同期で読み込むファイルが置かれる。</p>

<p>requirejsとは違い、非同期で読み込む先のファイルも最適なbuildがかかった状態になるためパフォーマンスがよい。また、複雑なファイル解析はせず、単純にjsonp形式で追加モジュールを読み込むため非常にシンプル。</p>

<h2>その他</h2>

<ul>
<li>webpackでは全てのモジュールが閉じたスコープ内で管理される。（もちろんexpose-loaderを使用しない限り）</li>
<li>何度requireしてもキャッシュされた同じ箇所を参照するのみなので、パフォーマンスに悪影響を与えない。例えばurl-loaderで何度画像をrequireしても、文字列として展開される箇所は一箇所。</li>
</ul>


<h2>サンプルアプリケーション</h2>

<p>今回紹介したポイントをほとんど抑えたサンプルを作成しました。</p>

<p><a href="http://instarest.thujikun.com/">demo</a></p>

<p>やっていることは</p>

<ol>
<li>instagramのAPIで画像及びテキストデータ取得。</li>
<li>pinterest風に並べる。</li>
</ol>


<p>の２つです。環境は</p>

<ul>
<li>gulp</li>
<li>webpack</li>
<li>webpack-dev-server</li>
<li>stylus</li>
<li>ect</li>
</ul>


<p>を用いて開発環境と本番環境をそれぞれ別々に構築していて、Backbone、Angular、react等のフレームワークには依存していないので、応用しやすいかなと思います。</p>

<p><a href="https://github.com/thujikun/instarest/tree/master/">source</a></p>

<p>ふー、なんとか日にち間に合った。駆け足だったので変なこと書いていたら教えて下さい。使い倒すとか言ってますがまだまだ使い倒せてません＞＜</p>

<p><a href="http://qiita.com/advent-calendar/2014/javascript">JavaScript Advent Calendar 2014</a>の8日目は、muyuuさんです！よろしくお願いします！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CompassでSpriteなんてもう古い！？grunt-spritesmithのすすめ]]></title>
    <link href="http://thujikun.github.io/blog/2014/02/20/grunt-spritesmith/"/>
    <updated>2014-02-20T21:42:54+09:00</updated>
    <id>http://thujikun.github.io/blog/2014/02/20/grunt-spritesmith</id>
    <content type="html"><![CDATA[<p>釣りっぽいタイトルになってますが、ようはCompassのSprite Generatorだと解決できないことを<a href="https://github.com/Ensighten/grunt-spritesmith">grunt-spritesmith</a>ならやってくれるよって話です。
Compassの方については山ほど記事があるので、あまり知らないよって方はてきとーにググってください。</p>

<h2>Compassの問題点</h2>

<h3>Sassでしか使えない</h3>

<p>一つ目は当然ですが、CompassはSassのフレームワークなのでLessとかStylus派の人は使えないってことです。
私は最近はStylus派なので、なにか良いSpriteツールないかなーと探し始めたのが最初でした。</p>

<h3>SassのCompileのたびにSprite化処理が実行される</h3>

<p>これは画像が多いサイトではかなり深刻な問題となります。画像とは関係ないStyleの変更時でも毎回Sprite化が実行されるため、確認までかなりの時間をロスします。</p>

<h3>正方形に画像を並べるとPaddingの指定が効かない</h3>

<p>Sprite画像のサイズをできるだけ小さくしようとすると、当然正方形に近い方が望ましいといえます。が！CompassのSprite Generatorの場合正方形にするとpaddingの指定が効かず、画像どおしがくっついちゃいます。
そうするとちょっとpaddingをもたせて配置したいときとか、拡大縮小されたときに隣の画像がチラホラ見えておかしなことになります。</p>

<h3>Retina対応わかりづらい</h3>

<p>なんかいろんな指定方法があって正直わかりづらいと個人的には感じてます。画像サイズも手で指定しなきゃいけないし。</p>

<h3>Compassの開発が停滞中</h3>

<p>最近はめっきり開発が止まっちゃってますね。CSS3のmixinも不十分だし、ちょっとこれからも使っていくには不安です。ちなみにCSS3のmixinについては<a href="http://bourbon.io/">bourbon</a>入れれば一応解決できます。</p>

<p>だいたいぱっと思い浮かぶのはこのへんでしょうか。とくに1と2は深刻な問題ですね。</p>

<h2>grunt-spritesmithができること</h2>

<h3>CSS, Sass, Less, Stylus, JSON形式に対応</h3>

<p>生のCSSや各CSSプリプロセッサ、さらにはJSON形式でも出力してくれます。</p>

<ul>
<li><p>生のCSSの場合昔ながらのGeneratorを使ったときと同じように、画像名でclassがつくられます。もちろんprefixもつけられます。</p></li>
<li><p>各CSSプリプロセッサの形式を指定した場合、画像名ごとのmixinと画像の各パラメータ(width, height, offset, 画像名, positionなど)を全て変数として出力してくれます。なのでRetina対応とかもそのへんのパラメータ使えば簡単にできます。</p></li>
<li><p>JSON形式の場合もCSSプリプロセッサの形式と同じように各パラメータをJSON形式で出力してくれます。個人的にはまだ利用はしていないですが、gruntを経由してjade, js, stylusで同じJSONファイルを元に開発を行ったりできそうだなーとは思ってます。</p></li>
</ul>


<h3>画像が増えたときのみタスクを実行すれば良い</h3>

<p>当然CSSプリプロセッサとは別のタスクとしてGruntの設定を行うため、Sprite画像生成とCSSプリプロセッサのCompileをわけることができます。高速Compile最高ですね。</p>

<h3>画像を正方形に並べてpaddingもとれる</h3>

<p>こちらは問題なく画像を正方形に並べつつ、かつpaddingも設定することができます。なのでSprite画像のサイズを最小限に抑えることができます。</p>

<h2>使い方</h2>

<p>サンプルを<a href="https://github.com/thujikun/spritesmith-sample">こちら</a>に作成しましたので、よかったら試してみてください。
cloneしてnpm installしてgruntって実行すると、distフォルダに各出力結果ごとの結果が見れます。
他にもいくつかパラメータつけてるので、Gruntfile.jsと合わせて見てもらえればと思います。</p>

<h2>結論</h2>

<p>みんなこれで心置きなくStylusに移行できる☆彡</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[便利なjavascriptテクニック集]]></title>
    <link href="http://thujikun.github.io/blog/2013/12/15/js-tech/"/>
    <updated>2013-12-15T10:33:40+09:00</updated>
    <id>http://thujikun.github.io/blog/2013/12/15/js-tech</id>
    <content type="html"><![CDATA[<p>今回はjavascriptで知ってる人にとっては当たり前だけど、そうでない人は全然知らないようなテクニックをまとめていきます。</p>

<h2>globalを汚さない無名関数スコープ</h2>

<p>javascriptの問題のひとつとしてスコープがよくとりあげられますが、ここではグローバルスコープを汚さない手法を紹介していきます。</p>

<h3>悪い例</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// これはグローバルスコープ</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみにglobalスコープとはwindowオブジェクトにプロパティを追加していくことと同義です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 下記の２つは結果として同じことを行っている。</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>解決するには下記のように無名関数を用います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 無名関数をつくり即時実行</span>
</span><span class='line'><span class="p">;(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// スコープが関数内で閉じる。</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>また、jQueryを使うときは、下記のように引数でjQueryを渡して、$という名前で引数として受け取ってあげると、$のconflict問題から開放されます。<br/>
というか$をグローバル参照するのはバグの元になるのでやめましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">;(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// スコープが関数内で閉じる。</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#hoge&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;hogehoge&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">}.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">jQuery</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに無名関数の書き方は他にもあります。気にしなきゃいけないほどの違いはないので好みで選んでよいでしょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// カッコの位置がちょっと違う。</span>
</span><span class='line'><span class="p">;(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="p">}).</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// jslintだとsyntaxエラーになるかも。一応一文字少ないので一番軽い。</span>
</span><span class='line'><span class="p">;</span><span class="o">!</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="p">}.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>※1 先頭のセミコロンはconcatした場合に、エラーになる可能性を排除するためです。<br/>
※2 callを使っているのは、通常の関数呼び出しだとstrictモードの場合に無名関数内部のthisがwindowオブジェクトにならないためです。</p>

<h2>ArrayっぽいけどArrayじゃないObjectをArrayにする方法</h2>

<p>document.getElementsByClassNameとかdocument.querySelectorAllとかで複数のDOMを取得したときの戻り値とか、argumentsプロパティは見た感じArrayっぽいのにArrayにはなってません。<br/>
その結果何がどうなるかというと、pushとかjoinとかArrayが持っているメソッドが使えず、非常に使いづらい状態です。<br/>
それを解消するための方法が下記のテクニックです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// リストのDOMを取得</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">list</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;.hoge-list li&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ArrayっぽいObjectからArrayに変換</span>
</span><span class='line'><span class="nx">list</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">list</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちょっと解説すると、まずArray型が持っているメソッドで、配列の一部を切り出すsliceメソッドがあります。<br/>
これは非破壊的メソッドで、このメソッドを実行したArrayはそのままで、実行結果を新しいArrayとして返却してくれます。<br/>
その結果引数を指定しなければ、Arrayをシャローコピー(1階層のみコピー)することができます。<br/>
さらにその特性を活かして、sliceをArrayのprototypeから直接呼び出し、callを使ってthisをArrayっぽいObjectで上書くことで完全なArray型にキャストすることができます。</p>

<h2>関数のthisを指定したObjectでbind</h2>

<p>当たり前に使われてますが、知らない人も結構多いかと思うので一応。applyとcallです。<br/>
javascriptのfunction型はprototypeにcallとapplyってメソッドを持っていて、呼び出したfunctionのthisを第一引数でbindすることができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">hoge</span><span class="p">(</span><span class="nx">foo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">hoge</span><span class="p">,</span> <span class="nx">foo</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// -&gt; hogehoge bar</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// hoge関数のthisに文字列’hogehoge’を指定して実行。</span>
</span><span class='line'><span class="nx">hoge</span><span class="p">.</span><span class="nx">call</span><span class="p">({</span><span class="nx">hoge</span><span class="o">:</span> <span class="s1">&#39;hogehoge&#39;</span><span class="p">},</span> <span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>jQueryでthisを参照するとDOMオブジェクトになってるのはこういう方法を使ってます。そのせいでthisってなんぞ？みたいなことになるわけですが。<br/>
callとapplyの違いは関数の引数の指定方法です。<br/>
callは第2引数が第1引数に、第3引数が第2引数に、といった具合に順番がひとつずつずれる方法になります。<br/>
applyは第2引数をArray指定する形になっていて、それが順番に引数になります。<br/>
apply使うと$.whenみたいなArrayの引数ではなく可変長な引数の関数が格段に使いやすくなるのでお勧めです。</p>

<h2>可変長引数の扱い方</h2>

<p>関数で可変長な引数に対応したい場合がたまにあります。その方が綺麗に見える場合だったり、プラグインを独自拡張したい場合だったり。<br/>
そんなときに使えるのargumentsプロパティです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">hoge</span><span class="p">(</span><span class="nx">name1</span><span class="p">,</span> <span class="nx">name2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">name2</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// -&gt; foo bar</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// arumentsプロパティには引数が入っている</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="c1">// -&gt; foo bar</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">hoge</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>ただ、実際に可変長引数を使いたいと思った場合は、for文とかでまわして処理を行いたいことが多いです。<br/>
しかし、argumentsプロパティは配列っぽい要素であって配列ではありません。というわけで、上で書いた手法がよく使われることになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">hoge</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">args</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 引数それぞれに対しての処理</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみにargumentsプロパティは実装がヤバイらしく、あまり使用が推奨されていません。<br/>
ES6からは正式に可変長引数がサポートされるので将来的にはそっちを使うほうがよいです。<br/>
あとこれ必要ない場合に使うと可読性が著しく落ちるのでご利用は計画的に。<br/>
最後に、プラグイン内部で関数どおしが何やってるかわからないけど、一部の値をちょっと書き換えたり、取得したいって場合がまれによくあります。<br/>
そんなときは下記のようなテクニックが使えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 元の処理を退避</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">_ajax</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">ajax</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Backbone</span><span class="p">.</span><span class="nx">ajax</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// なんか独自処理</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 元々のBackbone.ajaxを本来呼ばれたときと同じ形で呼び出す。</span>
</span><span class='line'>    <span class="nx">_ajax</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>このときはBackboneのajaxをカスタマイズして、エラーハンドリングを全処理で共通的に行うようなことをしたんですが、長くなるので今回は見送ります。</p>

<h2>argumentsの隠された力</h2>

<p>argumentsプロパティは上で書いたようによく引数取得で使われるわけですが、実は隠された力を持っています。<br/>
ただその力はあまりにチートで危険すぎるため、strictモードでは禁止されていますのであらかじめご了承ください。</p>

<h3>arguments.callee</h3>

<p>まず一つ目はarguments.calleeです。これはその関数自身のことです。無名関数だけど再帰処理がしたい場合とかに使えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">deepCopy</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">name</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">ret</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">obj</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">ret</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="nx">name</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">ret</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">name</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">ret</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">name</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">ret</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記はObjectをdeepコピーする関数ですが、無名関数で作っているため再帰処理をする場合に自分自身を関数名で呼び出すことができません。<br/>
そのため、arguments.calleeで自分自身を呼んでいます。<br/>
もちろん名前付き関数として定義すれば問題なく動作しますが、関数名変えたりする場合に一箇所修正すればいいので個人的には好きな書き方です。<br/>
あと<a href="https://twitter.com/azu_re">@azu_re</a>さんからご指摘もらった件について追記します。<br/>
IE8を無視すれば名前付き関数式がサポートされてるので下記のような書き方が可能です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">deepCopy</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">dc</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">name</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">ret</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">obj</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">ret</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="nx">name</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">ret</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">dc</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">name</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">ret</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">name</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">ret</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// IE8に対応した書き方は下記のような感じ</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">deepCopy</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">dc</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">dc</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">name</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">ret</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">obj</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">ret</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="nx">name</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">ret</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">dc</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">name</span><span class="p">]);</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">ret</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">name</span><span class="p">];</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">ret</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>arguments.callee.caller.arguments</h3>

<p>次に紹介するのはarguments.callee.caller.argumentsです。<br/>
これはなんと呼び出し元の関数の引数を取得することができます。ちなみにarguments.callee.callerは呼び出しの関数が取得できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">hoge</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">hogehoge</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">hogehoge</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 呼び出し元の一つ目の引数を表示</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">.</span><span class="nx">caller</span><span class="p">.</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>    <span class="c1">// -&gt; foo</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">hoge</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>ただしこれをやってしまうと、可読性が著しく悪化するばかりか、関数の呼び出し順に過度に依存することになるので、非常事態以外には触るな危険です。<br/>
また、もちろんこれどんどん遡って行くことが可能で、一番最初の呼び出し元関数まで全部取得可能です。<br/>
私はBackbone.ajaxでBackbone.syncの引数の取得に使用しました。ごめんなさい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ちょっと未来のJavaScript]]></title>
    <link href="http://thujikun.github.io/blog/2013/12/14/ie/"/>
    <updated>2013-12-14T02:00:03+09:00</updated>
    <id>http://thujikun.github.io/blog/2013/12/14/ie</id>
    <content type="html"><![CDATA[<p>本エントリは　<a href="http://qiita.com/advent-calendar/2013/javascript">JavaScript Advent Calendar 2013</a>14日目となります。<br/>
来年遂にXPが逝去されるということで、IE9以降のシェアが飛躍的に伸びることを祈りつつ、IE9以降でJavaScriptでできるようになることを気がつく限りまとめてみました。</p>

<h2>DOM</h2>

<h3>addEventListener / removeEventListener</h3>

<p>イベントを登録/削除するためのメソッド。IE8まではattachEventとdetachEventという似たような、でも割と細かいところで動きが違うメソッドを使う必要があったが、IE9から標準のaddEventListenerがサポートされている。<br/>
※ jQueryのon/offとかbind/unbindとだいたい同じ。<br/>
※ 第3引数はuseCaptureといって、trueにするとイベント伝播を上位のDOMから発生させることができる。まあ使うことないけど。<br/>
※ <a href="https://developer.mozilla.org/ja/docs/Web/API/EventTarget.addEventListener">addEventListener</a>, <a href="https://developer.mozilla.org/ja/docs/Web/API/EventTarget.removeEventListener">removeEventListener</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">onClickFunction</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//クリック時の処理</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// クリックイベント設定</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;hoge&#39;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">onClickFunction</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// クリックイベント削除</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;hoge&#39;</span><span class="p">).</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">onClickFunction</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>createEvent / dispatchEvent</h3>

<p>イベントを作成/発火するためのメソッド。IE8まではcreateEventObjectとfireEventというこれまた似たような、でもやっぱり色々動きが異なるメソッドがあった。<br/>
※ jQueryの$.eventとかtriggerとだいたい同じ。<br/>
※ <a href="https://developer.mozilla.org/ja/docs/DOM/document.createEvent">createEvent</a>, <a href="https://developer.mozilla.org/ja/docs/Web/API/EventTarget.dispatchEvent">dispatchEvent</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// イベントオブジェクト作成</span>
</span><span class='line'><span class="c1">// 引数にはイベント種別を渡す。</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">evt</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createEvent</span><span class="p">(</span><span class="s1">&#39;MouseEvents&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// イベントオブジェクト初期化</span>
</span><span class='line'><span class="c1">// 引数の内容はhttps://developer.mozilla.org/ja/docs/Web/API/event.initMouseEventを参照。</span>
</span><span class='line'><span class="c1">// マウス座標とかctrlキーが押されてるかどうかなど色々指定可能。</span>
</span><span class='line'><span class="nx">evt</span><span class="p">.</span><span class="nx">initMouseEvent</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nb">window</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// イベント発火</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;hoge&#39;</span><span class="p">).</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="nx">evt</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Composition Events</h3>

<p>composition Eventsは文字の変換イベントを取得できるメソッドです。<br/>
これまではFFにも対応したければsetIntervalで入力中にテキストフィールドを監視する必要があったのが、これを使えば解消することができます。<br/>
まあIE系ならkeydown + setTimeoutでもいいし、FFならinputイベント使えばいいって話もあるけど。<br/>
※ compositionstartイベントとcompositionupdateイベントは同時に発火するが、compositionupdateイベントとcompositionendイベントは同時に発火しない。<br/>
※ <a href="https://developer.mozilla.org/ja/docs/DOM/CompositionEvent">CompositionEvent</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">textElement</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;hoge&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// テキスト変換開始時イベント監視</span>
</span><span class='line'><span class="nx">textxElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;compositionstart&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//変換開始時処理</span>
</span><span class='line'><span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// テキスト変換中イベント監視</span>
</span><span class='line'><span class="nx">textxElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;compositionupdate&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//変換中処理</span>
</span><span class='line'><span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// テキスト変換完了時イベント監視</span>
</span><span class='line'><span class="nx">textxElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;compositionend&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//変換完了時処理</span>
</span><span class='line'><span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Mutation Events</h3>

<p>DOMの追加/変更/削除などDOMの状態監視ができるイベント。類似メソッドは今までなかったのでかなり画期的なんじゃないかと思う。Angularの処理を強引にjQueryで補足したいときとかに使えるかもね。<br/>
※ 多用すると処理が追えなくなる可能性あり。<br/>
※ IE9ではDOMNodeInsertedが動かないらしい。<br/>
※ パフォーマンスの関係でMutation Eventsは非推奨になり、最新仕様はMutation Observerになっている。そのためMutation EventsはPolyfillとして用いるべし。<br/>
※ <a href="https://developer.mozilla.org/ja/docs/Web/Guide/API/DOM/Events/Mutation_events">Mutation Events</a>, <a href="https://developer.mozilla.org/ja/docs/Web/API/MutationObserver">Mutation Observer</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// エレメントの属性の変更を監視</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;DOMNodeInserted&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 属性変更時処理</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;追加された！&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">));</span>
</span><span class='line'><span class="c1">// -&gt; 追加された！</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>DOMAttrModifiedはどのブラウザでも動作しない模様。  
</code></pre>

<h3>DOMContentLoaded Event</h3>

<p>DOMの読み込みを待ち合わせるイベント。<br/>
※ $(document).ready(function(){})とか$(function(){})と同じ。IE9以降なら内f部的にこれが使われてる。<br/>
※ <a href="https://developer.mozilla.org/ja/docs/Web/Reference/Events/DOMContentLoaded">DOMContentLoaded</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;DOMContentLoaded&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// DOM読み込み時処理</span>
</span><span class='line'><span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>querySelector / querySelectorAll</h3>

<p>CSSのselectorでDOM探索ができるメソッド。完全にjQuery感覚で使えます。まあgetElementByIdとかgetElementsByClassNameとか別のが使える場合はそっち使った方が速いです。<br/>
※ <a href="https://developer.mozilla.org/ja/docs/Web/API/document.querySelectorAll">querySelectorAll</a><br/>
※ 追記 querySelectorはIE8からサポートされてましたm(__)m。<a href="https://twitter.com/teppeis">@teppeis</a>さんご指摘ありがとうございますー！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">list</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;ul li&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>classListはIE10から、datasetはIE11からの実装のようです。。。</p>

<h2>ECMA Script 5</h2>

<h3>Array</h3>

<pre><code>Array型の追加メソッドはunderscoreとか使ってる人ならピンとくるはず。  
</code></pre>

<ul>
<li>forEach<br/>
  引数に関数をとり、値とインデックスがループでまわって引数に入ってくる。ようはfor文回すのに、iとかlengthとか必要ないし、 ループ内スコープの変数が使えるってこと。<br/>
  ※ <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">forEach</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="s1">&#39;e&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">arr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// function内部なので、スコープがループの中で閉じる</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">index</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// -&gt; 値とインデックスがコンソールに出力される</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>filter<br/>
  配列の中から指定した条件を満たすものだけを取り出して新たな配列を作成することができる。非破壊的メソッド。<br/>
  ※ <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">filter</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">43</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 偶数のものだけ取り出す。</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">value</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>indexOf<br/>
  配列を指定された値で検索するメソッド。返却値は見つかった最初のインデックスで、ない場合は-1が返る。<br/>
  検索を始めるインデックスを第二引数で指定することも可能。<br/>
  ※ <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf">indexOf</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;abc&#39;</span><span class="p">,</span> <span class="s1">&#39;def&#39;</span><span class="p">,</span> <span class="s1">&#39;ghi&#39;</span><span class="p">,</span> <span class="s1">&#39;jkl&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;def&#39;</span><span class="p">));</span>
</span><span class='line'><span class="c1">// -&gt; 1</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;mno&#39;</span><span class="p">));</span>
</span><span class='line'><span class="c1">// -&gt; -1</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>some<br/>
  配列の各要素に対してテストを実行し、一つでもテストに合格する要素があればtrueを返し、一つもなければfalseを返す。<br/>
  ※ <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/some">some</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">43</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 60以上の値があるかどうか判定</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">60</span> <span class="o">&lt;</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}));</span>
</span><span class='line'><span class="c1">// -&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 70以上の値があるかどうか判定</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">70</span> <span class="o">&lt;</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}));</span>
</span><span class='line'><span class="c1">// -&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>every<br/>
  配列の各要素に対してテストを実行し、全要素がテストに合格であればtrueを返し、一つでも欠ければfalseを返す。<br/>
  ※ <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/every">every</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">43</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 全ての値が1以上かどうか判定</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">every</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}));</span>
</span><span class='line'><span class="c1">// -&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 全ての値が5以上かどうか判定</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">every</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">5</span> <span class="o">&lt;</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}));</span>
</span><span class='line'><span class="c1">// -&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>map<br/>
  配列の各要素に対して処理を行い、その結果からなる新しい配列を生成する。非破壊的メソッド<br/>
  ※ <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/map">map</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">43</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 全ての値が1以上かどうか判定</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">value</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="p">}));</span>
</span><span class='line'><span class="c1">// -&gt; [20, 450, 210, 670, 320, 20, 430]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>reduce<br/>
  配列の隣り合う値を左から順に呼び出し、その結果から単一の値をつくる。<br/>
  ※ 右から実行する<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight">reduceRight</a>もある。<br/>
  ※ <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce">reduce</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">43</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 全ての値が1以上かどうか判定</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value1</span><span class="p">,</span> <span class="nx">value2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">value1</span> <span class="o">+</span> <span class="nx">value2</span><span class="p">;</span>
</span><span class='line'><span class="p">}));</span>
</span><span class='line'><span class="c1">// -&gt; 212</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Object</h3>

<ul>
<li>defineProperty / defineProperties<br/>
  -Object.hoge = function(){};の形で書くのに比べ、writable属性、enumerable属性、configurable属性の設定ができたり、アクセサ（配列のlengthみたいなやつ）がつくれたりする。

<ul>
<li>writable: 上書き可能かどうか</li>
<li>enumerable: for inループなどのObjectのプロパティ列挙時に表示されるかどうか。</li>
<li>configurable: プロパティの設定を変更することができるかどうか。</li>
<li>get: プロパティのゲッターとなるメソッド。(アクセサの場合のみ)</li>
<li>set: プロパティのセッターとなるメソッド。(アクセサの場合のみ)<br/>
※ 個人的にはprototype拡張の際によく使うが、様々な用途で使えるとは思う。<br/>
※ <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">defineProperty</a></li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">MyClass</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">members</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// メンバーを登録するsetMemberメソッドを作成</span>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">MyClass</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s1">&#39;setMember&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">writable</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">enumeable</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">configurable</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">members</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// メンバーを取得するgetMemberメソッドを作成</span>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">MyClass</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s1">&#39;getMember&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">writable</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">enumeable</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">configurable</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">members</span><span class="p">[</span><span class="nx">id</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 現在のメンバー数を返却するcountアクセサを追加。値を指定された場合は何もしない。</span>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">MyClass</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s1">&#39;count&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">members</span><span class="p">).</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">set</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">myClass</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">myClass</span><span class="p">.</span><span class="nx">setMember</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">myClass</span><span class="p">.</span><span class="nx">setMember</span><span class="p">(</span><span class="s1">&#39;hoge&#39;</span><span class="p">,</span> <span class="s1">&#39;hogehoge&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myClass</span><span class="p">.</span><span class="nx">getMember</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">));</span>
</span><span class='line'><span class="c1">// -&gt; &#39;bar&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myClass</span><span class="p">.</span><span class="nx">count</span><span class="p">);</span>
</span><span class='line'><span class="c1">// -&gt; 2</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// setメソッドは何もしないので値を登録しても値は変化しない。</span>
</span><span class='line'><span class="nx">myClass</span><span class="p">.</span><span class="nx">count</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myClass</span><span class="p">.</span><span class="nx">count</span><span class="p">);</span>
</span><span class='line'><span class="c1">// -&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>create<br/>
指定したオブジェクトのプロトタイプ及び、プロパティを持つオブジェクトを生成する。簡単に既存のオブジェクトを継承して、新しいプロトタイプも持つオブジェクトがつくれる。<br/>
definePropertyと同様に、各属性の設定や、アクセサもつくれる。<br/>
※ <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/create">create</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 通常の配列を追加</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="mi">232</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="mi">1111</span><span class="p">];</span>
</span><span class='line'><span class="c1">// 配列を拡張して、0から数えたlengthプロパティを新たに追加。</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">customArr</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">lengthFromZero</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">set</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">customArr</span><span class="p">.</span><span class="nx">lengthFromZero</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>getOwnPropertyNames<br/>
enumerable属性に関わらず、オブジェクトのプロパティを配列で返却する。<br/>
※ <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames">getOwnPropertyNames</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyNames</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">));</span>
</span><span class='line'><span class="c1">// -&gt; [&quot;length&quot;, &quot;constructor&quot;, &quot;toString&quot;, &quot;toLocaleString&quot;, &quot;join&quot;, &quot;pop&quot;, &quot;push&quot;, &quot;concat&quot;, &quot;reverse&quot;, &quot;shift&quot;, &quot;unshift&quot;, &quot;slice&quot;, &quot;splice&quot;, &quot;sort&quot;, &quot;filter&quot;, &quot;forEach&quot;, &quot;some&quot;, &quot;every&quot;, &quot;map&quot;, &quot;indexOf&quot;, &quot;lastIndexOf&quot;, &quot;reduce&quot;, &quot;reduceRight&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>keys<br/>
オブジェクトの列挙可能なプロパティを配列で返却する。for-inループと違い、プロトタイプのプロパティはとってこない。<br/>
※ <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/keys">keys</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">hoge</span><span class="o">:</span> <span class="s1">&#39;hogehoge&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">));</span>
</span><span class='line'><span class="c1">// -&gt; [&#39;foo&#39;, &#39;hoge&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>freeze<br/>
オブジェクトを凍結する。具体的にはプロパティの追加/編集/削除、設定変更を不可能にする。プロパティがObjectの場合、その中身までは凍結できない。<br/>
※ <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze">freeze</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">hoge</span><span class="o">:</span> <span class="s1">&#39;hogehoge&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">list</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">foofoo</span><span class="o">:</span> <span class="s1">&#39;barbar&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// オブジェクトを凍結</span>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// obj.list.foofooのみ編集可能。</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">hoge</span> <span class="o">=</span> <span class="s1">&#39;hogehogehoge&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;taro&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">list</span><span class="p">.</span><span class="nx">foofoo</span> <span class="o">=</span> <span class="s1">&#39;barbarbarbar&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Function</h3>

<ul>
<li>bind
Functionのthisを引数のオブジェクトでバインドする。apply/callと違ってその場でfunctionコールせず、thisでbindされたfunctionオブジェクトを返却してくれる。<br/>
※ $.proxyとか_.bindと同じ。<br/>
※ <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">bind</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="nx">foo</span><span class="p">.</span><span class="nx">bind</span><span class="p">({</span><span class="nx">hoge</span><span class="o">:</span> <span class="s1">&#39;hogehoge&#39;</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">bar</span><span class="p">();</span>
</span><span class='line'><span class="c1">// -&gt; {hoge: &#39;hogehoge&#39;}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>String</h3>

<ul>
<li>trim / trimRight / trimLeft<br/>
念願のtrimがようやくjsに。文字列の前後の空白を削除する。非破壊的メソッド<br/>
※ 驚くべきことに全角空白にも対応している！！！<br/>
※ <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/trim">trim</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;　　　   bar   　　　&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">.</span><span class="nx">trim</span><span class="p">());</span>
</span><span class='line'><span class="c1">// -&gt; bar</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Date</h3>

<ul>
<li>now<br/>
UTC（協定世界時）での1970年1月1日00時00分00秒から現在までの経過ミリ秒を数値で取得するメソッド。new Date().getTime()と同じ。相違点はスピード。<br/>
※ <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Date/now">now</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<h2>IE8とどうしてもまだ付き合わなきゃいけない方へ</h2>

<p>es5のshimを使ってくださってる方がいるので、これを入れると上記のメソッド達はだいたい使えます。<br/>
<a href="https://github.com/kriskowal/es5-shim">https://github.com/kriskowal/es5-shim</a></p>

<p>DOM系のやつもそれぞれshimを作ってる方がいたり、あとは自分でpolyfill作ってしまってもよいかもですね。</p>

<h2>まとめ的な</h2>

<p>HTML5とかCSS3はまだだいぶ弱いですが、DOM系とES5系でそれなりに強化されるので、小さいサイトの制作であればjQueryを使わない選択肢があってもいいんじゃないかなーと思ってます。<br/>
まあこのへんが前からサポートされてるスマートフォン向けサイトでも、Zeptoすらあまり使われずjQueryが当たり前に使われてる現状を考えると難しそうですが。。。<br/>
ネイティブのjsでかかれたプラグインが充実してくれば変わってくるのかな。</p>

<h2>HTML5</h2>

<p>HTML5のAPIについてはいろんなところにサンプルあるので詳細は割愛しますー。<br/>
やはりCanvasとSVGが目立つところですかね。</p>

<h3>canvas</h3>

<h3>SVG</h3>

<h3>Sectioning Elements</h3>

<h3>Geolocation</h3>

<h3>Video(H.264) not Mpeg4, WebM</h3>

<h3>Audio(AAC and MP3)</h3>

<h2>IE10+ (HTML5)</h2>

<p>ちゃんと洗い出1してないのでこれだけではないと思いますが、IE10まで移行できれば強力なAPIが目白押しですね。</p>

<h3>History API</h3>

<h3>websocket</h3>

<h3>input[type=xxx]</h3>

<h3>Form VDalidation</h3>

<h3>Pointer Events</h3>

<h3>XHR2</h3>

<h3>Drag and Drop</h3>

<h3>Native Binary Data</h3>

<h3>Web Workers</h3>

<h3>CORS</h3>

<h3>Sandboxed iframe</h3>

<h3>Application cache</h3>

<h3>Indexed DB</h3>

<h3>File API</h3>

<h3>pagevisibility API</h3>

<h3>CSS3 Animations</h3>

<h2>さらにES6も使いたい方へ</h2>

<p>ES6では、定数、ブロックスコープ変数、Class、Module、Promise、generator、iterator、配列内包表記、arrow function、Map、WeakMap、Set、of loopなどなどまさに夢のようなAPI達がこれでもかと使うことができます。現在の実装状況は下記を参照すると良いです。<br/>
<a href="http://kangax.github.io/es5-compat-table/es6/  ">http://kangax.github.io/es5-compat-table/es6/  </a>
見ていただければわかりますが、FFの実装が最も進んでいます。Chromeも頑張ってはいますが、FlagをONにしなきゃいけないので非現実的ですね。<br/>
まとめると以下の方法が現在ES6を使うための手法です。</p>

<ul>
<li>traceur-compilerを使う。<br/>
<a href="https://github.com/google/traceur-compiler">https://github.com/google/traceur-compiler</a></li>
</ul>


<p>主要な機能は大体使えます。具体的な使い方はこんな感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://traceur-compiler.googlecode.com/git/bin/traceur.js&quot;</span>
</span><span class='line'>        <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://traceur-compiler.googlecode.com/git/src/bootstrap.js&quot;</span>
</span><span class='line'>        <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/traceur&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="kr">class</span> <span class="nx">Greeter</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">constructor</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="nx">message</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">greet</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">let</span> <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#message&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">element</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">message</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">let</span> <span class="nx">greeter</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Greeter</span><span class="p">(</span><span class="s1">&#39;Hello, world!&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">greeter</span><span class="p">.</span><span class="nx">greet</span><span class="p">();</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>typescriptを使う。
MicroSoftの開発しているtypescriptはES6の先行実装的な思想で作られてるjsのプリコンパイラなので、これを使う手もあります。<br/>
<a href="http://www.typescriptlang.org/">typescript</a></li>
<li>node.jsを使う。<br/>
Gruntなどサーバを立てる用途でなくてもnodeを使う機会は確実に増えている今日この頃、これを使わない手はありません。<br/>
node起動時に&mdash;harmonyオプションをつけるか、Gruntなど内部的にNodeを呼ぶやつで使う場合はpackage.jsonをちょっと工夫してやるとES6の機能が開放されます。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{
</span><span class='line'>  &quot;scripts&quot;: {
</span><span class='line'>    &quot;start&quot;: &quot;node --harmony ./node_modules/.bin/grunt start&quot;
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>FirefoxOSアプリ開発を行う。<br/>
上記でも言ったようにFirefoxの実装は最も進んでいる状況なので、FirefoxOS向けアプリ開発ではES6の機能がガンガン使えます。<br/>
本来Web標準で作れることのメリットであるクロスプラットフォームの互換性は失われますが、そんなものは現場からすると初めから幻想なのでムシムシ。</li>
<li>RhinoもしくはNashornを使う。<br/>
これはだいぶマニアックな方法ですがMozillaがJVM上でjavascriptで書いたコードをJavaに変換して実行するライブラリを出しています。<br/>
MozillaということはFirefoxと大体同じ実装状況だと言えるので、ES6の機能もだいぶサポートされています。<br/>
Java7までがRhino、Java8からがNashornになります。<br/>
ちなみにClosure CompilerはRhinoを使ってますね。</li>
</ul>


<p>というわけでここまで読んでいただいてありがとうございましたー！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://thujikun.github.io/blog/2013/12/14/hello-world/"/>
    <updated>2013-12-14T00:22:16+09:00</updated>
    <id>http://thujikun.github.io/blog/2013/12/14/hello-world</id>
    <content type="html"><![CDATA[<h2>Blog始めました</h2>

<p>本日初のAdvent Calendarを投稿するにあたってGithub + Octopress + Gitbucketを利用してBlogを作成しました。<br/>
みんな大好きmarkdownで記述できるのはものすごく楽ですね。もちろんHTMLも使えますが。<br/>
構築には下記のサイトを参考にさせていただきましたので、興味のある方はやってみてください。</p>

<p><a href="http://morizyun.github.io/blog/octopress-gitpage-minimum-install-guide/">http://morizyun.github.io/blog/octopress-gitpage-minimum-install-guide/</a></p>
]]></content>
  </entry>
  
</feed>
